#include "GlobalAnalyzer.h"

GlobalAnalyzer::GlobalAnalyzer() {
  this->mailbox = new Mailbox();
  this->mailbox->setOwnerId(getpid());
  this->urls = new std::vector<std::string>;
  this->url_maps = new std::map<std::string, std::map<std::string, int>*>;
}

GlobalAnalyzer::~GlobalAnalyzer() {
  delete this->urls;
  for (auto it = this->url_maps->begin(); it != this->url_maps->end(); it++) {
    delete it->second;
  }
  delete this->url_maps;
}

void GlobalAnalyzer::createProcesses(std::vector<std::string>* urls) {
  this->urls = urls;
  for (size_t i = 0; i < urls->size(); i++) {
    pid_t pid = fork();
    if (pid == -1) {
      std::cout << "Error creating child process" << std::endl;
      return;
    } else if (pid == 0) {
      Analyzer* analyzer = new Analyzer();
      std::map<std::string, int>* myMap = analyzer->getMap(urls->at(i));
      analyzer->sendMessage((urls->at(i)), myMap, this->mailbox);
      exit(0);
    }
  }
}

void GlobalAnalyzer::readMailbox() {
  while (this->url_maps->size() < this->urls->size()) {
    Message_t* message = this->mailbox->RecieveMsg();
    if (message->sender_pid != -1) {
      std::map<std::string, int>* tags
          = (std::map<std::string, int>*)message->data;
      std::cout << "Message recieved from child number: " << message->sender_pid
                << std::endl;
      this->url_maps->insert({ message->sender_url, tags });
    }
    // delete message;
  }

  std::cout << "Tags per URL:" << std::endl;
  for (auto it = this->url_maps->begin(); it != this->url_maps->end(); it++) {
    std::cout << it->first << ":" << std::endl;
    for (auto it2 = it->second->begin(); it2 != it->second->end(); it2++) {
      std::cout << it2->first << ": " << it2->second << std::endl;
    }
  }
}
